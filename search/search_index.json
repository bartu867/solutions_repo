{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"\ud83d\udef0\ufe0f Problem 1 \u2013 Investigating the Range as a Function of the Angle of Projection Physics | Mechanics | KW1 Assignment Author: Bartu867 Date: March 29, 2025 \ud83d\udcd8 1\ufe0f\u20e3 Theoretical Foundation \u2013 Projectile Motion Projectile motion is a classic example of 2D motion under constant acceleration (gravity). It can be broken into two components: horizontal motion and vertical motion . \u2699\ufe0f Governing Equations from Newton\u2019s Laws Newton\u2019s Second Law ( \\(F = ma\\) ) applied in the vertical direction gives constant downward acceleration due to gravity. We ignore air resistance and assume motion starts at ground level. \ud83d\udd39 Horizontal Motion (No Acceleration) Constant velocity (no force in x-direction) Displacement: \\( \\(x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t\\) \\) \ud83d\udd39 Vertical Motion (Constant Acceleration) Acceleration is \\(-g\\) (downward) Displacement: \\( \\(y(t) = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2\\) \\) Vertical velocity: \\( \\(v_y(t) = v_0 \\cdot \\sin(\\theta) - gt\\) \\) \ud83e\uddee Time of Flight At landing, \\(y = 0\\) : \\[0 = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2\\] Solving for total time \\(t\\) : \\[t = \\frac{2v_0 \\cdot \\sin(\\theta)}{g}\\] \ud83c\udfaf Range of the Projectile Use total flight time in horizontal displacement: \\[R = x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t\\] Substitute \\(t\\) : \\[R = v_0 \\cdot \\cos(\\theta) \\cdot \\frac{2v_0 \\cdot \\sin(\\theta)}{g}$$ $$R = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g}\\] \ud83d\udd01 Influence of Parameters Initial Velocity ( \\(v_0\\) ): Range increases quadratically with \\(v_0\\) . Doubling \\(v_0\\) results in \\(4\\times\\) the range. Gravitational Acceleration ( \\(g\\) ): Higher \\(g\\) means shorter flight time and range. On the Moon ( \\(g \\approx 1.6\\) ), the range is much longer. Angle ( \\(\\theta\\) ): Range is maximum at \\(\\theta = 45^\\circ\\) . \\(\\sin(2\\theta)\\) creates a symmetric curve around \\(45^\\circ\\) . \ud83e\udde0 Family of Solutions Changing \\(v_0\\) , \\(g\\) , or \\(\\theta\\) generates a family of projectile paths with different ranges and shapes. For example: \\(\\theta = 30^\\circ\\) and \\(\\theta = 60^\\circ\\) \u2192 same range, different height and flight time Different \\(v_0\\) values shift the entire trajectory up/down Different \\(g\\) values (like Moon vs Earth) stretch the flight arc \ud83d\udcbb Python Helper Code (Just for Later Use) import numpy as np from scipy.optimize import root_scalar # \ud83d\udcca 2\ufe0f\u20e3 Analysis of the Range \u2013 Numerical Investigation We now numerically investigate how the **range of a projectile** depends on various parameters: - Launch angle $\\theta$ - Initial velocity $v_0$ - Gravitational acceleration $g$ - Launch height $h$ (optional) --- ## \ud83c\udfaf Governing Equation (Ideal Case) The ideal range equation (no air resistance, flat terrain): $$R(\\theta)=\\frac{v_0^2\\cdot\\sin(2\\theta)}{g}$$ - $R$: horizontal range (meters) - $v_0$: initial speed - $\\theta$: launch angle - $g$: gravitational acceleration # \ud83d\udce6 Libraries import numpy as np import matplotlib.pyplot as plt from scipy.optimize import root_scalar # \ud83c\udfaf Ideal range formula def ideal_range(v0, g, theta_deg): theta_rad = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta_rad)) / g # \ud83e\uddee Launch height model def range_with_height(v0, g, theta_deg, h): theta_rad = np.radians(theta_deg) vy = v0 * np.sin(theta_rad) vx = v0 * np.cos(theta_rad) def y(t): return h + vy * t - 0.5 * g * t**2 sol = root_scalar(y, bracket=[0.01, 100], method='brentq') t_flight = sol.root return vx * t_flight # \ud83d\udd01 Angle values angles = np.arange(0, 91, 1) # \u2705 Graph 1: Different initial velocities g = 9.81 velocities = [50, 100, 150] plt.figure(figsize=(10, 5)) for v0 in velocities: ranges = ideal_range(v0, g, angles) plt.plot(angles, ranges, label=f\"v\u2080 = {v0} m/s\") plt.title(\"Range vs Angle \u2013 Different Initial Velocities\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() # \u2705 Graph 2: Earth vs Moon gravities = [9.81, 1.62] v0 = 100 plt.figure(figsize=(10, 5)) for g_val in gravities: ranges = ideal_range(v0, g_val, angles) label = \"Earth\" if g_val == 9.81 else \"Moon\" plt.plot(angles, ranges, label=f\"{label} (g = {g_val} m/s\u00b2)\") plt.title(\"Range vs Angle on Earth and Moon\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() --- # \u2705 Graph 3: Launch height simulation heights = [0, 20, 50] plt.figure(figsize=(10, 5)) for h in heights: ranges = [range_with_height(v0, g, angle, h) for angle in angles] plt.plot(angles, ranges, label=f\"Height = {h} m\") plt.title(\"Range vs Angle \u2013 Different Launch Heights\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() # Compare different launch heights heights = [0, 20, 50] v0 = 100 g = 9.81 plt.figure(figsize=(10, 5)) for h in heights: ranges = [range_with_height(v0, g, angle, h) for angle in angles] plt.plot(angles, ranges, label=f\"Height = {h} m\") plt.title(\"Range vs Angle \u2013 Different Launch Heights\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() ## \ud83c\udfaf Range vs Angle (v\u2080 = 50, 100, 150 m/s) ![Initial Velocities](../images/1.png) # \ud83c\udf0d 3\ufe0f\u20e3 Practical Applications \u2013 Real-World Relevance of Projectile Motion Projectile motion isn't just a classroom example\u2014it\u2019s used in many industries and scientific fields. Below are major real-world applications and extensions of the basic model. --- ## \ud83c\udfc0 Sports Projectile motion explains the flight paths of balls in sports: - **Soccer**: A lofted pass or curved free-kick behaves like a projectile. - **Basketball**: A jump shot\u2019s angle and arc can be optimized for scoring. - **Golf**: Swing angle and club speed determine the ball\u2019s range and peak height. Idealized range model: $$R=\\frac{v_0^2\\cdot\\sin(2\\theta)}{g}$$ In reality, air resistance and spin modify this path. --- ## \ud83c\udfd7\ufe0f Engineering Engineering applications include: - **Ballistics**: Predicting cannon, bullet, or missile trajectories. - **Robotics**: Calculating parabolic paths for objects thrown by machines. - **Fireworks**: Designing precise aerial patterns. To model these realistically, you often include: - Mass $m$ - Drag force $F_d$ - Initial launch height $h$ - Wind effect --- ## \ud83d\ude80 Astrophysics In space, projectile motion generalizes to **orbital mechanics**. - **Rocket launches** start with projectile-like curves. - Spacecraft escape velocity depends on trajectory and gravity. Gravitational variation with height is modeled by: $$g(h)=\\frac{GM}{(R+h)^2}$$ Where: - $G$: gravitational constant - $M$: mass of the planet - $R$: planetary radius - $h$: altitude --- ## \ud83c\udf04 Uneven Terrain In realistic environments: - Launch and landing points are at **different heights** - Terrain can be **inclined** or **irregular** In such cases, the standard range formula fails. You must solve: $$y(t)=h+v_0\\cdot\\sin(\\theta)\\cdot t-\\frac{1}{2}gt^2$$ To find $t$ when $y=y_{\\text{target}}$, and then: $$R=v_0\\cdot\\cos(\\theta)\\cdot t_{\\text{impact}}$$ Numerical root-finding (e.g., Brent\u2019s method) is used. --- ## \ud83c\udf2c\ufe0f Air Resistance Air resistance adds complexity: $$F_d=\\frac{1}{2}C_d\\rho Av^2$$ Where: - $C_d$: drag coefficient - $\\rho$: air density - $A$: cross-sectional area - $v$: velocity magnitude Effects: - Decreases both range and max height - Makes path asymmetric This requires solving a **system of nonlinear differential equations**. --- ## \ud83c\udf2a\ufe0f Wind Effects Wind contributes a horizontal force component: - Can **increase or decrease** horizontal speed - Can **push laterally**, affecting direction Wind modeling often uses: $$F_{\\text{wind}}=m\\cdot a_{\\text{wind}}$$ Or adjusted velocity: $$v_{\\text{eff}}=v_0\\pm v_{\\text{wind}}$$ --- ## \ud83c\udf15 Variable Gravity Gravity isn\u2019t always constant: - On the **Moon**, $g=1.62$ - On **Mars**, $g=3.71$ - High altitudes slightly reduce Earth\u2019s $g$ More accurate gravity model: $$g(h)=\\frac{GM}{(R+h)^2}$$ Used for: - Rocket reentry - Lunar landing - Satellite deployment --- ## \u2705 Summary Realistic projectile modeling must include: - Variable launch/landing heights - Gravitational variation - Wind and drag - Mass and surface area of the object The basic model is only a starting point\u2014these factors shape **real-world trajectories** \ud83c\udf10 ## \ud83d\udcbb 4\ufe0f\u20e3 Implementation \u2013 Coding the Projectile Motion We now translate the theoretical physics into working **Python code** using `numpy` and `matplotlib`. --- ## \ud83c\udfaf Goals - \u2705 Write a function to calculate **range** as a function of angle $\u03b8$ - \u2705 Plot **range vs angle** - \u2705 Try different values for: - Initial velocity $v_0$ - Gravitational acceleration $g$ --- ## \ud83e\uddee Governing Equation The **ideal range equation** (no air resistance, flat terrain) is: $$ R(\u03b8) = \\frac{v_0^2 \\cdot \\sin(2\u03b8)}{g} $$ Where: - $R$: horizontal range (meters) - $v_0$: initial velocity (m/s) - $\u03b8$: angle of projection (degrees) - $g$: gravitational acceleration (m/s\u00b2) --- ## \ud83d\udce6 Required Libraries ```python import numpy as np import matplotlib.pyplot as plt \ud83e\udde0 Function to Compute Ideal Range def ideal_range(v0, g, theta_deg): theta_rad = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta_rad)) / g \ud83d\udcca Plot \u2013 Range vs Launch Angle (Single Setup) We simulate for: - \\(v_0 = 100\\ \\text{m/s}\\) - \\(g = 9.81\\ \\text{m/s}^2\\) - \\(\u03b8 \u2208 [0\u00b0, 90\u00b0]\\) v0 = 100 # initial speed in m/s g = 9.81 # gravitational acceleration in m/s\u00b2 angles = np.arange(0, 91, 1) # 0 to 90 degrees ranges = ideal_range(v0, g, angles) plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, color='darkorange') plt.title(\"Range vs Launch Angle (v\u2080 = 100 m/s)\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.tight_layout() plt.show() \ud83e\uddea Experiment: Different Initial Velocities velocities = [50, 100, 150] plt.figure(figsize=(10, 5)) for v0 in velocities: ranges = ideal_range(v0, g, angles) plt.plot(angles, ranges, label=f\"v\u2080 = {v0} m/s\") plt.title(\"Range vs Angle \u2013 Varying Initial Velocity\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() \ud83c\udf0d Experiment: Different Gravitational Accelerations g_values = [9.81, 3.71, 1.62] # Earth, Mars, Moon v0 = 100 plt.figure(figsize=(10, 5)) for g_val in g_values: label = f\"g = {g_val} m/s\u00b2\" ranges = ideal_range(v0, g_val, angles) plt.plot(angles, ranges, label=label) plt.title(\"Range vs Angle \u2013 Earth, Mars, Moon\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.legend() plt.grid(True) plt.tight_layout() plt.show() \u2705 Summary The range follows a symmetric curve , peaking at 45\u00b0 Higher \\(v_0\\) \u2192 longer range Lower \\(g\\) \u2192 longer flight time \u2192 longer range Realistic simulations may also include air drag and launch height (optional) \ud83d\udd1c (Optional): Extend this by adding range_with_height() and air resistance models.","title":"\ud83d\udef0\ufe0f Problem 1 \u2013 Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1-investigating-the-range-as-a-function-of-the-angle-of-projection","text":"Physics | Mechanics | KW1 Assignment Author: Bartu867 Date: March 29, 2025","title":"\ud83d\udef0\ufe0f Problem 1 \u2013 Investigating the Range as a Function of the Angle of Projection"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation-projectile-motion","text":"Projectile motion is a classic example of 2D motion under constant acceleration (gravity). It can be broken into two components: horizontal motion and vertical motion .","title":"\ud83d\udcd8 1\ufe0f\u20e3 Theoretical Foundation \u2013 Projectile Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#governing-equations-from-newtons-laws","text":"Newton\u2019s Second Law ( \\(F = ma\\) ) applied in the vertical direction gives constant downward acceleration due to gravity. We ignore air resistance and assume motion starts at ground level.","title":"\u2699\ufe0f Governing Equations from Newton\u2019s Laws"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion-no-acceleration","text":"Constant velocity (no force in x-direction) Displacement: \\( \\(x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t\\) \\)","title":"\ud83d\udd39 Horizontal Motion (No Acceleration)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion-constant-acceleration","text":"Acceleration is \\(-g\\) (downward) Displacement: \\( \\(y(t) = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2\\) \\) Vertical velocity: \\( \\(v_y(t) = v_0 \\cdot \\sin(\\theta) - gt\\) \\)","title":"\ud83d\udd39 Vertical Motion (Constant Acceleration)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"At landing, \\(y = 0\\) : \\[0 = v_0 \\cdot \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2\\] Solving for total time \\(t\\) : \\[t = \\frac{2v_0 \\cdot \\sin(\\theta)}{g}\\]","title":"\ud83e\uddee Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-of-the-projectile","text":"Use total flight time in horizontal displacement: \\[R = x(t) = v_0 \\cdot \\cos(\\theta) \\cdot t\\] Substitute \\(t\\) : \\[R = v_0 \\cdot \\cos(\\theta) \\cdot \\frac{2v_0 \\cdot \\sin(\\theta)}{g}$$ $$R = \\frac{v_0^2 \\cdot \\sin(2\\theta)}{g}\\]","title":"\ud83c\udfaf Range of the Projectile"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-parameters","text":"Initial Velocity ( \\(v_0\\) ): Range increases quadratically with \\(v_0\\) . Doubling \\(v_0\\) results in \\(4\\times\\) the range. Gravitational Acceleration ( \\(g\\) ): Higher \\(g\\) means shorter flight time and range. On the Moon ( \\(g \\approx 1.6\\) ), the range is much longer. Angle ( \\(\\theta\\) ): Range is maximum at \\(\\theta = 45^\\circ\\) . \\(\\sin(2\\theta)\\) creates a symmetric curve around \\(45^\\circ\\) .","title":"\ud83d\udd01 Influence of Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"Changing \\(v_0\\) , \\(g\\) , or \\(\\theta\\) generates a family of projectile paths with different ranges and shapes. For example: \\(\\theta = 30^\\circ\\) and \\(\\theta = 60^\\circ\\) \u2192 same range, different height and flight time Different \\(v_0\\) values shift the entire trajectory up/down Different \\(g\\) values (like Moon vs Earth) stretch the flight arc","title":"\ud83e\udde0 Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#python-helper-code-just-for-later-use","text":"import numpy as np from scipy.optimize import root_scalar # \ud83d\udcca 2\ufe0f\u20e3 Analysis of the Range \u2013 Numerical Investigation We now numerically investigate how the **range of a projectile** depends on various parameters: - Launch angle $\\theta$ - Initial velocity $v_0$ - Gravitational acceleration $g$ - Launch height $h$ (optional) --- ## \ud83c\udfaf Governing Equation (Ideal Case) The ideal range equation (no air resistance, flat terrain): $$R(\\theta)=\\frac{v_0^2\\cdot\\sin(2\\theta)}{g}$$ - $R$: horizontal range (meters) - $v_0$: initial speed - $\\theta$: launch angle - $g$: gravitational acceleration # \ud83d\udce6 Libraries import numpy as np import matplotlib.pyplot as plt from scipy.optimize import root_scalar # \ud83c\udfaf Ideal range formula def ideal_range(v0, g, theta_deg): theta_rad = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta_rad)) / g # \ud83e\uddee Launch height model def range_with_height(v0, g, theta_deg, h): theta_rad = np.radians(theta_deg) vy = v0 * np.sin(theta_rad) vx = v0 * np.cos(theta_rad) def y(t): return h + vy * t - 0.5 * g * t**2 sol = root_scalar(y, bracket=[0.01, 100], method='brentq') t_flight = sol.root return vx * t_flight # \ud83d\udd01 Angle values angles = np.arange(0, 91, 1) # \u2705 Graph 1: Different initial velocities g = 9.81 velocities = [50, 100, 150] plt.figure(figsize=(10, 5)) for v0 in velocities: ranges = ideal_range(v0, g, angles) plt.plot(angles, ranges, label=f\"v\u2080 = {v0} m/s\") plt.title(\"Range vs Angle \u2013 Different Initial Velocities\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() # \u2705 Graph 2: Earth vs Moon gravities = [9.81, 1.62] v0 = 100 plt.figure(figsize=(10, 5)) for g_val in gravities: ranges = ideal_range(v0, g_val, angles) label = \"Earth\" if g_val == 9.81 else \"Moon\" plt.plot(angles, ranges, label=f\"{label} (g = {g_val} m/s\u00b2)\") plt.title(\"Range vs Angle on Earth and Moon\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() --- # \u2705 Graph 3: Launch height simulation heights = [0, 20, 50] plt.figure(figsize=(10, 5)) for h in heights: ranges = [range_with_height(v0, g, angle, h) for angle in angles] plt.plot(angles, ranges, label=f\"Height = {h} m\") plt.title(\"Range vs Angle \u2013 Different Launch Heights\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() # Compare different launch heights heights = [0, 20, 50] v0 = 100 g = 9.81 plt.figure(figsize=(10, 5)) for h in heights: ranges = [range_with_height(v0, g, angle, h) for angle in angles] plt.plot(angles, ranges, label=f\"Height = {h} m\") plt.title(\"Range vs Angle \u2013 Different Launch Heights\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.legend() plt.tight_layout() plt.show() ## \ud83c\udfaf Range vs Angle (v\u2080 = 50, 100, 150 m/s) ![Initial Velocities](../images/1.png) # \ud83c\udf0d 3\ufe0f\u20e3 Practical Applications \u2013 Real-World Relevance of Projectile Motion Projectile motion isn't just a classroom example\u2014it\u2019s used in many industries and scientific fields. Below are major real-world applications and extensions of the basic model. --- ## \ud83c\udfc0 Sports Projectile motion explains the flight paths of balls in sports: - **Soccer**: A lofted pass or curved free-kick behaves like a projectile. - **Basketball**: A jump shot\u2019s angle and arc can be optimized for scoring. - **Golf**: Swing angle and club speed determine the ball\u2019s range and peak height. Idealized range model: $$R=\\frac{v_0^2\\cdot\\sin(2\\theta)}{g}$$ In reality, air resistance and spin modify this path. --- ## \ud83c\udfd7\ufe0f Engineering Engineering applications include: - **Ballistics**: Predicting cannon, bullet, or missile trajectories. - **Robotics**: Calculating parabolic paths for objects thrown by machines. - **Fireworks**: Designing precise aerial patterns. To model these realistically, you often include: - Mass $m$ - Drag force $F_d$ - Initial launch height $h$ - Wind effect --- ## \ud83d\ude80 Astrophysics In space, projectile motion generalizes to **orbital mechanics**. - **Rocket launches** start with projectile-like curves. - Spacecraft escape velocity depends on trajectory and gravity. Gravitational variation with height is modeled by: $$g(h)=\\frac{GM}{(R+h)^2}$$ Where: - $G$: gravitational constant - $M$: mass of the planet - $R$: planetary radius - $h$: altitude --- ## \ud83c\udf04 Uneven Terrain In realistic environments: - Launch and landing points are at **different heights** - Terrain can be **inclined** or **irregular** In such cases, the standard range formula fails. You must solve: $$y(t)=h+v_0\\cdot\\sin(\\theta)\\cdot t-\\frac{1}{2}gt^2$$ To find $t$ when $y=y_{\\text{target}}$, and then: $$R=v_0\\cdot\\cos(\\theta)\\cdot t_{\\text{impact}}$$ Numerical root-finding (e.g., Brent\u2019s method) is used. --- ## \ud83c\udf2c\ufe0f Air Resistance Air resistance adds complexity: $$F_d=\\frac{1}{2}C_d\\rho Av^2$$ Where: - $C_d$: drag coefficient - $\\rho$: air density - $A$: cross-sectional area - $v$: velocity magnitude Effects: - Decreases both range and max height - Makes path asymmetric This requires solving a **system of nonlinear differential equations**. --- ## \ud83c\udf2a\ufe0f Wind Effects Wind contributes a horizontal force component: - Can **increase or decrease** horizontal speed - Can **push laterally**, affecting direction Wind modeling often uses: $$F_{\\text{wind}}=m\\cdot a_{\\text{wind}}$$ Or adjusted velocity: $$v_{\\text{eff}}=v_0\\pm v_{\\text{wind}}$$ --- ## \ud83c\udf15 Variable Gravity Gravity isn\u2019t always constant: - On the **Moon**, $g=1.62$ - On **Mars**, $g=3.71$ - High altitudes slightly reduce Earth\u2019s $g$ More accurate gravity model: $$g(h)=\\frac{GM}{(R+h)^2}$$ Used for: - Rocket reentry - Lunar landing - Satellite deployment --- ## \u2705 Summary Realistic projectile modeling must include: - Variable launch/landing heights - Gravitational variation - Wind and drag - Mass and surface area of the object The basic model is only a starting point\u2014these factors shape **real-world trajectories** \ud83c\udf10 ## \ud83d\udcbb 4\ufe0f\u20e3 Implementation \u2013 Coding the Projectile Motion We now translate the theoretical physics into working **Python code** using `numpy` and `matplotlib`. --- ## \ud83c\udfaf Goals - \u2705 Write a function to calculate **range** as a function of angle $\u03b8$ - \u2705 Plot **range vs angle** - \u2705 Try different values for: - Initial velocity $v_0$ - Gravitational acceleration $g$ --- ## \ud83e\uddee Governing Equation The **ideal range equation** (no air resistance, flat terrain) is: $$ R(\u03b8) = \\frac{v_0^2 \\cdot \\sin(2\u03b8)}{g} $$ Where: - $R$: horizontal range (meters) - $v_0$: initial velocity (m/s) - $\u03b8$: angle of projection (degrees) - $g$: gravitational acceleration (m/s\u00b2) --- ## \ud83d\udce6 Required Libraries ```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83d\udcbb Python Helper Code (Just for Later Use)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#function-to-compute-ideal-range","text":"def ideal_range(v0, g, theta_deg): theta_rad = np.radians(theta_deg) return (v0**2 * np.sin(2 * theta_rad)) / g","title":"\ud83e\udde0 Function to Compute Ideal Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#plot-range-vs-launch-angle-single-setup","text":"We simulate for: - \\(v_0 = 100\\ \\text{m/s}\\) - \\(g = 9.81\\ \\text{m/s}^2\\) - \\(\u03b8 \u2208 [0\u00b0, 90\u00b0]\\) v0 = 100 # initial speed in m/s g = 9.81 # gravitational acceleration in m/s\u00b2 angles = np.arange(0, 91, 1) # 0 to 90 degrees ranges = ideal_range(v0, g, angles) plt.figure(figsize=(8, 5)) plt.plot(angles, ranges, color='darkorange') plt.title(\"Range vs Launch Angle (v\u2080 = 100 m/s)\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.grid(True) plt.tight_layout() plt.show()","title":"\ud83d\udcca Plot \u2013 Range vs Launch Angle (Single Setup)"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#experiment-different-initial-velocities","text":"velocities = [50, 100, 150] plt.figure(figsize=(10, 5)) for v0 in velocities: ranges = ideal_range(v0, g, angles) plt.plot(angles, ranges, label=f\"v\u2080 = {v0} m/s\") plt.title(\"Range vs Angle \u2013 Varying Initial Velocity\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.legend() plt.grid(True) plt.tight_layout() plt.show()","title":"\ud83e\uddea Experiment: Different Initial Velocities"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#experiment-different-gravitational-accelerations","text":"g_values = [9.81, 3.71, 1.62] # Earth, Mars, Moon v0 = 100 plt.figure(figsize=(10, 5)) for g_val in g_values: label = f\"g = {g_val} m/s\u00b2\" ranges = ideal_range(v0, g_val, angles) plt.plot(angles, ranges, label=label) plt.title(\"Range vs Angle \u2013 Earth, Mars, Moon\") plt.xlabel(\"Launch Angle (degrees)\") plt.ylabel(\"Range (meters)\") plt.legend() plt.grid(True) plt.tight_layout() plt.show()","title":"\ud83c\udf0d Experiment: Different Gravitational Accelerations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#summary","text":"The range follows a symmetric curve , peaking at 45\u00b0 Higher \\(v_0\\) \u2192 longer range Lower \\(g\\) \u2192 longer flight time \u2192 longer range Realistic simulations may also include air drag and launch height (optional) \ud83d\udd1c (Optional): Extend this by adding range_with_height() and air resistance models.","title":"\u2705 Summary"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"\ud83d\udd2c Physics Assignment \u2013 KW1 Topic: Mechanics \u2013 Oscillations & Motion Author: Bartu867 Date: March 27, 2025 Problem 1 \u2013 Investigating the Dynamics of a Forced Damped Pendulum \ud83c\udfaf Goal Analyze the motion of a forced damped pendulum and observe how different parameters influence its behavior \u2014 including regular, resonant, and chaotic motion. \ud83d\udcd8 Theoretical Background The motion of a forced damped pendulum is governed by the second-order nonlinear differential equation: d\u00b2\u03b8/dt\u00b2 + b(d\u03b8/dt) + \u03c9\u2080\u00b2 sin(\u03b8) = A cos(\u03c9t) Where: - \u03b8: angular displacement - b: damping coefficient - \u03c9\u2080: natural frequency - A: amplitude of external force - \u03c9: driving frequency \ud83d\udd22 Reformulated System (First-Order) To apply numerical methods, the second-order ODE is transformed into two coupled first-order ODEs: Let \u03c9 = d\u03b8/dt, then: d\u03b8/dt = \u03c9 d\u03c9/dt = -b\u03c9 - \u03c9\u2080\u00b2 sin(\u03b8) + A cos(\u03c9t) \ud83e\udde0 Numerical Method: Runge-Kutta 4th Order (RK4) The RK4 method is used to solve the equations. The update steps for each time interval dt: \u03b8\u2099\u208a\u2081 = \u03b8\u2099 + (1/6)(k1_\u03b8 + 2k2_\u03b8 + 2k3_\u03b8 + k4_\u03b8) \u03c9\u2099\u208a\u2081 = \u03c9\u2099 + (1/6)(k1_\u03c9 + 2k2_\u03c9 + 2k3_\u03c9 + k4_\u03c9) \ud83d\udcbb Python Code \u2013 Pendulum Simulation ```python import numpy as np import matplotlib.pyplot as plt Parameters b = 0.5 # damping coefficient w0 = 1.5 # natural frequency A = 1.2 # driving force amplitude w = 0.666 # driving frequency dt = 0.04 # time step T = 100 # total simulation time Time array t = np.arange(0, T, dt) Arrays for theta and omega theta = np.zeros_like(t) omega = np.zeros_like(t) Initial conditions theta[0] = 0.2 omega[0] = 0.0 Runge-Kutta 4th order method for i in range(1, len(t)): k1_theta = dt * omega[i - 1] k1_omega = dt * (-b * omega[i - 1] - w0**2 * np.sin(theta[i - 1]) + A * np.cos(w * t[i - 1])) k2_theta = dt * (omega[i - 1] + 0.5 * k1_omega) k2_omega = dt * (-b * (omega[i - 1] + 0.5 * k1_omega) - w0**2 * np.sin(theta[i - 1] + 0.5 * k1_theta) + A * np.cos(w * (t[i - 1] + 0.5 * dt))) k3_theta = dt * (omega[i - 1] + 0.5 * k2_omega) k3_omega = dt * (-b * (omega[i - 1] + 0.5 * k2_omega) - w0**2 * np.sin(theta[i - 1] + 0.5 * k2_theta) + A * np.cos(w * (t[i - 1] + 0.5 * dt))) k4_theta = dt * (omega[i - 1] + k3_omega) k4_omega = dt * (-b * (omega[i - 1] + k3_omega) - w0**2 * np.sin(theta[i - 1] + k3_theta) + A * np.cos(w * (t[i - 1] + dt))) theta[i] = theta[i - 1] + (k1_theta + 2 * k2_theta + 2 * k3_theta + k4_theta) / 6 omega[i] = omega[i - 1] + (k1_omega + 2 * k2_omega + 2 * k3_omega + k4_omega) / 6 Plotting plt.figure(figsize=(10, 5)) plt.plot(t, theta) plt.title(\"Forced Damped Pendulum \u2013 Angular Displacement Over Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show()","title":"\ud83d\udd2c Physics Assignment \u2013 KW1"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#physics-assignment-kw1","text":"Topic: Mechanics \u2013 Oscillations & Motion Author: Bartu867 Date: March 27, 2025","title":"\ud83d\udd2c Physics Assignment \u2013 KW1"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-1-investigating-the-dynamics-of-a-forced-damped-pendulum","text":"","title":"Problem 1 \u2013 Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#goal","text":"Analyze the motion of a forced damped pendulum and observe how different parameters influence its behavior \u2014 including regular, resonant, and chaotic motion.","title":"\ud83c\udfaf Goal"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-background","text":"The motion of a forced damped pendulum is governed by the second-order nonlinear differential equation: d\u00b2\u03b8/dt\u00b2 + b(d\u03b8/dt) + \u03c9\u2080\u00b2 sin(\u03b8) = A cos(\u03c9t) Where: - \u03b8: angular displacement - b: damping coefficient - \u03c9\u2080: natural frequency - A: amplitude of external force - \u03c9: driving frequency","title":"\ud83d\udcd8 Theoretical Background"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#reformulated-system-first-order","text":"To apply numerical methods, the second-order ODE is transformed into two coupled first-order ODEs: Let \u03c9 = d\u03b8/dt, then: d\u03b8/dt = \u03c9 d\u03c9/dt = -b\u03c9 - \u03c9\u2080\u00b2 sin(\u03b8) + A cos(\u03c9t)","title":"\ud83d\udd22 Reformulated System (First-Order)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#numerical-method-runge-kutta-4th-order-rk4","text":"The RK4 method is used to solve the equations. The update steps for each time interval dt: \u03b8\u2099\u208a\u2081 = \u03b8\u2099 + (1/6)(k1_\u03b8 + 2k2_\u03b8 + 2k3_\u03b8 + k4_\u03b8) \u03c9\u2099\u208a\u2081 = \u03c9\u2099 + (1/6)(k1_\u03c9 + 2k2_\u03c9 + 2k3_\u03c9 + k4_\u03c9)","title":"\ud83e\udde0 Numerical Method: Runge-Kutta 4th Order (RK4)"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-code-pendulum-simulation","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83d\udcbb Python Code \u2013 Pendulum Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"b = 0.5 # damping coefficient w0 = 1.5 # natural frequency A = 1.2 # driving force amplitude w = 0.666 # driving frequency dt = 0.04 # time step T = 100 # total simulation time","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-array","text":"t = np.arange(0, T, dt)","title":"Time array"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#arrays-for-theta-and-omega","text":"theta = np.zeros_like(t) omega = np.zeros_like(t)","title":"Arrays for theta and omega"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#initial-conditions","text":"theta[0] = 0.2 omega[0] = 0.0","title":"Initial conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#runge-kutta-4th-order-method","text":"for i in range(1, len(t)): k1_theta = dt * omega[i - 1] k1_omega = dt * (-b * omega[i - 1] - w0**2 * np.sin(theta[i - 1]) + A * np.cos(w * t[i - 1])) k2_theta = dt * (omega[i - 1] + 0.5 * k1_omega) k2_omega = dt * (-b * (omega[i - 1] + 0.5 * k1_omega) - w0**2 * np.sin(theta[i - 1] + 0.5 * k1_theta) + A * np.cos(w * (t[i - 1] + 0.5 * dt))) k3_theta = dt * (omega[i - 1] + 0.5 * k2_omega) k3_omega = dt * (-b * (omega[i - 1] + 0.5 * k2_omega) - w0**2 * np.sin(theta[i - 1] + 0.5 * k2_theta) + A * np.cos(w * (t[i - 1] + 0.5 * dt))) k4_theta = dt * (omega[i - 1] + k3_omega) k4_omega = dt * (-b * (omega[i - 1] + k3_omega) - w0**2 * np.sin(theta[i - 1] + k3_theta) + A * np.cos(w * (t[i - 1] + dt))) theta[i] = theta[i - 1] + (k1_theta + 2 * k2_theta + 2 * k3_theta + k4_theta) / 6 omega[i] = omega[i - 1] + (k1_omega + 2 * k2_omega + 2 * k3_omega + k4_omega) / 6","title":"Runge-Kutta 4th order method"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plotting","text":"plt.figure(figsize=(10, 5)) plt.plot(t, theta) plt.title(\"Forced Damped Pendulum \u2013 Angular Displacement Over Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1 \u2013 Orbital Period and Orbital Radius Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 27, 2025 \ud83c\udfaf Goal Understand and derive the relationship between the square of the orbital period and the cube of the orbital radius (Kepler\u2019s Third Law). Analyze this for circular orbits and simulate the behavior using Python for different celestial bodies. \ud83e\udde0 Theoretical Background Kepler\u2019s Third Law states that the square of the orbital period \\( T \\) is proportional to the cube of the orbital radius \\( r \\) for planets orbiting the same central body: \\[ T^2 \\propto r^3 \\] For circular orbits, using Newton\u2019s law of gravitation and centripetal force, the orbital period can be derived as: \\[ T = 2\\pi \\sqrt{\\frac{r^3}{GM}} \\] Where: - \\( T \\) : orbital period (seconds) - \\( r \\) : orbital radius (meters) - \\( G \\) : gravitational constant \\( (6.674 \\times 10^{-11} \\, \\text{Nm}^2/\\text{kg}^2) \\) - \\( M \\) : mass of the central body (kg) This formula shows that the orbital period increases as the radius increases. \ud83d\udcbb Python Simulation import numpy as np import matplotlib.pyplot as plt # Constants G = 6.674e-11 # gravitational constant (m^3/kg/s^2) M = 5.9722e24 # mass of the Earth (kg) # Orbital radius values (from 7e6 to 4.2e7 meters) r = np.linspace(7e6, 4.2e7, 500) # Orbital period calculation using Kepler's 3rd Law T = 2 * np.pi * np.sqrt(r**3 / (G * M)) # in seconds # Plotting plt.figure(figsize=(10, 6)) plt.plot(r / 1e6, T / 3600, color=\"orange\") # Convert r to million meters, T to hours plt.title(\"Orbital Period vs Orbital Radius\") plt.xlabel(\"Orbital Radius (Million meters)\") plt.ylabel(\"Orbital Period (Hours)\") plt.grid(True) plt.tight_layout() plt.show()","title":"Problem 1 \u2013 Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1-orbital-period-and-orbital-radius","text":"Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 27, 2025","title":"Problem 1 \u2013 Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#goal","text":"Understand and derive the relationship between the square of the orbital period and the cube of the orbital radius (Kepler\u2019s Third Law). Analyze this for circular orbits and simulate the behavior using Python for different celestial bodies.","title":"\ud83c\udfaf Goal"},{"location":"1%20Physics/2%20Gravity/Problem_1/#theoretical-background","text":"Kepler\u2019s Third Law states that the square of the orbital period \\( T \\) is proportional to the cube of the orbital radius \\( r \\) for planets orbiting the same central body: \\[ T^2 \\propto r^3 \\] For circular orbits, using Newton\u2019s law of gravitation and centripetal force, the orbital period can be derived as: \\[ T = 2\\pi \\sqrt{\\frac{r^3}{GM}} \\] Where: - \\( T \\) : orbital period (seconds) - \\( r \\) : orbital radius (meters) - \\( G \\) : gravitational constant \\( (6.674 \\times 10^{-11} \\, \\text{Nm}^2/\\text{kg}^2) \\) - \\( M \\) : mass of the central body (kg) This formula shows that the orbital period increases as the radius increases.","title":"\ud83e\udde0 Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-simulation","text":"import numpy as np import matplotlib.pyplot as plt # Constants G = 6.674e-11 # gravitational constant (m^3/kg/s^2) M = 5.9722e24 # mass of the Earth (kg) # Orbital radius values (from 7e6 to 4.2e7 meters) r = np.linspace(7e6, 4.2e7, 500) # Orbital period calculation using Kepler's 3rd Law T = 2 * np.pi * np.sqrt(r**3 / (G * M)) # in seconds # Plotting plt.figure(figsize=(10, 6)) plt.plot(r / 1e6, T / 3600, color=\"orange\") # Convert r to million meters, T to hours plt.title(\"Orbital Period vs Orbital Radius\") plt.xlabel(\"Orbital Radius (Million meters)\") plt.ylabel(\"Orbital Period (Hours)\") plt.grid(True) plt.tight_layout() plt.show()","title":"\ud83d\udcbb Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"\ud83d\udef0\ufe0f Problem 2 \u2013 Escape Velocity and Celestial Bodies Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 27, 2025 \ud83c\udfaf Goal Examine how escape velocity varies with the mass and radius of a celestial body. Understand the concept of escape velocity and simulate how different planetary parameters affect it using Python. \ud83d\udcd8 Theoretical Background The escape velocity \\( v_e \\) is the minimum speed required for an object to break free from the gravitational pull of a massive body, without any further propulsion. The formula is derived from energy conservation: [ v_e = \\sqrt{\\frac{2GM}{R}} ] Where: - \\( v_e \\) : escape velocity (m/s) - \\( G \\) : gravitational constant \\( 6.674 \\times 10^{-11} \\, \\text{Nm}^2/\\text{kg}^2 \\) - \\( M \\) : mass of the celestial body (kg) - \\( R \\) : radius of the celestial body (m) \ud83d\udcbb Python Simulation ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.674e-11 # Gravitational constant Example celestial body masses (kg) and radii (m) masses = np.array([5.972e24, 6.39e23, 1.898e27]) # Earth, Mars, Jupiter radii = np.array([6.371e6, 3.3895e6, 6.9911e7]) # Earth, Mars, Jupiter names = ['Earth', 'Mars', 'Jupiter'] Escape velocity calculation v_escape = np.sqrt(2 * G * masses / radii) Plotting plt.figure(figsize=(10,6)) plt.bar(names, v_escape, color='crimson') plt.title(\"Escape Velocity for Different Celestial Bodies\") plt.ylabel(\"Escape Velocity (m/s)\") plt.grid(axis='y') plt.tight_layout() plt.show()","title":"\ud83d\udef0\ufe0f Problem 2 \u2013 Escape Velocity and Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2-escape-velocity-and-celestial-bodies","text":"Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 27, 2025","title":"\ud83d\udef0\ufe0f Problem 2 \u2013 Escape Velocity and Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#goal","text":"Examine how escape velocity varies with the mass and radius of a celestial body. Understand the concept of escape velocity and simulate how different planetary parameters affect it using Python.","title":"\ud83c\udfaf Goal"},{"location":"1%20Physics/2%20Gravity/Problem_2/#theoretical-background","text":"The escape velocity \\( v_e \\) is the minimum speed required for an object to break free from the gravitational pull of a massive body, without any further propulsion. The formula is derived from energy conservation: [ v_e = \\sqrt{\\frac{2GM}{R}} ] Where: - \\( v_e \\) : escape velocity (m/s) - \\( G \\) : gravitational constant \\( 6.674 \\times 10^{-11} \\, \\text{Nm}^2/\\text{kg}^2 \\) - \\( M \\) : mass of the celestial body (kg) - \\( R \\) : radius of the celestial body (m)","title":"\ud83d\udcd8 Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-simulation","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83d\udcbb Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#constants","text":"G = 6.674e-11 # Gravitational constant","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_2/#example-celestial-body-masses-kg-and-radii-m","text":"masses = np.array([5.972e24, 6.39e23, 1.898e27]) # Earth, Mars, Jupiter radii = np.array([6.371e6, 3.3895e6, 6.9911e7]) # Earth, Mars, Jupiter names = ['Earth', 'Mars', 'Jupiter']","title":"Example celestial body masses (kg) and radii (m)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocity-calculation","text":"v_escape = np.sqrt(2 * G * masses / radii)","title":"Escape velocity calculation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#plotting","text":"plt.figure(figsize=(10,6)) plt.bar(names, v_escape, color='crimson') plt.title(\"Escape Velocity for Different Celestial Bodies\") plt.ylabel(\"Escape Velocity (m/s)\") plt.grid(axis='y') plt.tight_layout() plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"\ud83d\udef0\ufe0f Problem 3 \u2013 Trajectories of a Freely Released Payload Near Earth Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 29, 2025 \ud83c\udfaf Goal Simulate and analyze the possible trajectories of a payload released near Earth from a moving spacecraft. Determine whether the object enters orbit, falls to Earth, or escapes into space depending on initial conditions. \ud83d\udcd8 Theoretical Background When an object is released from a spacecraft near Earth, it will follow a trajectory determined by its initial velocity and position relative to Earth's gravity. Using Newton's law of universal gravitation: \\[ F = \\frac{GMm}{r^2} \\] The motion of the payload follows Newton's second law: \\[ F = ma \\Rightarrow a = \\frac{GM}{r^2} \\] Depending on the initial velocity vector: If \\( v < v_{\\text{orbit}} \\) , it falls back to Earth. If \\( v = v_{\\text{orbit}} \\) , it enters circular orbit. If \\( v > v_{\\text{escape}} \\) , it escapes Earth's gravity. We will simulate the trajectory by numerically integrating the motion under gravitational acceleration. \ud83d\udcbb Python Simulation ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.674e-11 # gravitational constant (m^3/kg/s^2) M = 5.972e24 # mass of Earth (kg) R = 6.371e6 # radius of Earth (m) Initial conditions r0 = np.array([7.0e6, 0]) # initial position (just above Earth surface) v0 = np.array([0, 8000]) # initial velocity in m/s (tangential) Simulation parameters dt = 1 # time step (seconds) steps = 10000 # number of steps Arrays to store trajectory positions = np.zeros((steps, 2)) velocities = np.zeros((steps, 2)) Set initial values positions[0] = r0 velocities[0] = v0 Simulation loop for i in range(1, steps): r = positions[i-1] v = velocities[i-1] dist = np.linalg.norm(r) if dist < R: positions = positions[:i] # Break if the object is within Earth's radius break # Gravitational acceleration a = -G * M * r / dist**3 # Update velocity and position (Euler method) velocities[i] = v + a * dt positions[i] = r + velocities[i] * dt Plotting the trajectory x = positions[:, 0] / 1000 # Convert to km y = positions[:, 1] / 1000 # Convert to km plt.figure(figsize=(8,8)) plt.plot(x, y, label='Payload trajectory') circle = plt.Circle((0, 0), R / 1000, color='blue', alpha=0.5, label='Earth') plt.gca().add_patch(circle) plt.xlabel(\"x position (km)\") plt.ylabel(\"y position (km)\") plt.title(\"Trajectory of Payload Released Near Earth\") plt.axis(\"equal\") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"\ud83d\udef0\ufe0f Problem 3 \u2013 Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3-trajectories-of-a-freely-released-payload-near-earth","text":"Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 29, 2025","title":"\ud83d\udef0\ufe0f Problem 3 \u2013 Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#goal","text":"Simulate and analyze the possible trajectories of a payload released near Earth from a moving spacecraft. Determine whether the object enters orbit, falls to Earth, or escapes into space depending on initial conditions.","title":"\ud83c\udfaf Goal"},{"location":"1%20Physics/2%20Gravity/Problem_3/#theoretical-background","text":"When an object is released from a spacecraft near Earth, it will follow a trajectory determined by its initial velocity and position relative to Earth's gravity. Using Newton's law of universal gravitation: \\[ F = \\frac{GMm}{r^2} \\] The motion of the payload follows Newton's second law: \\[ F = ma \\Rightarrow a = \\frac{GM}{r^2} \\] Depending on the initial velocity vector: If \\( v < v_{\\text{orbit}} \\) , it falls back to Earth. If \\( v = v_{\\text{orbit}} \\) , it enters circular orbit. If \\( v > v_{\\text{escape}} \\) , it escapes Earth's gravity. We will simulate the trajectory by numerically integrating the motion under gravitational acceleration.","title":"\ud83d\udcd8 Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-simulation","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83d\udcbb Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#constants","text":"G = 6.674e-11 # gravitational constant (m^3/kg/s^2) M = 5.972e24 # mass of Earth (kg) R = 6.371e6 # radius of Earth (m)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-conditions","text":"r0 = np.array([7.0e6, 0]) # initial position (just above Earth surface) v0 = np.array([0, 8000]) # initial velocity in m/s (tangential)","title":"Initial conditions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#simulation-parameters","text":"dt = 1 # time step (seconds) steps = 10000 # number of steps","title":"Simulation parameters"},{"location":"1%20Physics/2%20Gravity/Problem_3/#arrays-to-store-trajectory","text":"positions = np.zeros((steps, 2)) velocities = np.zeros((steps, 2))","title":"Arrays to store trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_3/#set-initial-values","text":"positions[0] = r0 velocities[0] = v0","title":"Set initial values"},{"location":"1%20Physics/2%20Gravity/Problem_3/#simulation-loop","text":"for i in range(1, steps): r = positions[i-1] v = velocities[i-1] dist = np.linalg.norm(r) if dist < R: positions = positions[:i] # Break if the object is within Earth's radius break # Gravitational acceleration a = -G * M * r / dist**3 # Update velocity and position (Euler method) velocities[i] = v + a * dt positions[i] = r + velocities[i] * dt","title":"Simulation loop"},{"location":"1%20Physics/2%20Gravity/Problem_3/#plotting-the-trajectory","text":"x = positions[:, 0] / 1000 # Convert to km y = positions[:, 1] / 1000 # Convert to km plt.figure(figsize=(8,8)) plt.plot(x, y, label='Payload trajectory') circle = plt.Circle((0, 0), R / 1000, color='blue', alpha=0.5, label='Earth') plt.gca().add_patch(circle) plt.xlabel(\"x position (km)\") plt.ylabel(\"y position (km)\") plt.title(\"Trajectory of Payload Released Near Earth\") plt.axis(\"equal\") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"Plotting the trajectory"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}