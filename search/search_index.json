{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"\ud83d\udcd8 Family of Solutions from Governing Equations The motion of a projectile is derived from Newton\u2019s second law. Assuming no air resistance: Horizontal motion: \\( x(t) = v_0 \\cos(\\theta) \\cdot t \\) Vertical motion: \\( y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 \\) The time of flight \\( T \\) is: [ T = \\frac{2v_0 \\sin(\\theta)}{g} ] The horizontal range \\( R \\) becomes: [ R = v_0 \\cos(\\theta) \\cdot T = \\frac{v_0^2 \\sin(2\\theta)}{g} ] Each combination of \\( v_0 \\) , \\( \\theta \\) , and \\( g \\) defines a unique solution in the family of projectile trajectories. \ud83d\udcca Effect of Parameters on the Range Curve Initial velocity \\( v_0 \\) : Directly affects the range quadratically. A higher velocity results in a longer range. Gravitational acceleration \\( g \\) : Inversely affects the range. A lower gravity (e.g. Moon) increases the range. Projection angle \\( \\theta \\) : The range is maximum at 45\u00b0, and symmetric about 45\u00b0 (e.g., 30\u00b0 and 60\u00b0 give same range). These effects can be visualized by altering parameters in the Python simulation. \u26a0\ufe0f Limitations of the Idealized Model Assumes no air resistance (drag), which is unrealistic in real-world applications. Assumes flat ground and constant gravity, ignoring curvature of Earth and altitude changes. Does not account for wind or spin of the projectile. \ud83e\udde0 Suggestions for a More Realistic Model Introduce air resistance using a drag force term: \\( F_d = -kv \\) or \\( F_d = -kv^2 \\) Add wind effects as a constant or time-varying horizontal force. Include launch height or uneven terrain modeling. Extend to 2D vector-based simulations using numerical integration (e.g., Runge-Kutta methods).","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions-from-governing-equations","text":"The motion of a projectile is derived from Newton\u2019s second law. Assuming no air resistance: Horizontal motion: \\( x(t) = v_0 \\cos(\\theta) \\cdot t \\) Vertical motion: \\( y(t) = v_0 \\sin(\\theta) \\cdot t - \\frac{1}{2}gt^2 \\) The time of flight \\( T \\) is: [ T = \\frac{2v_0 \\sin(\\theta)}{g} ] The horizontal range \\( R \\) becomes: [ R = v_0 \\cos(\\theta) \\cdot T = \\frac{v_0^2 \\sin(2\\theta)}{g} ] Each combination of \\( v_0 \\) , \\( \\theta \\) , and \\( g \\) defines a unique solution in the family of projectile trajectories.","title":"\ud83d\udcd8 Family of Solutions from Governing Equations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#effect-of-parameters-on-the-range-curve","text":"Initial velocity \\( v_0 \\) : Directly affects the range quadratically. A higher velocity results in a longer range. Gravitational acceleration \\( g \\) : Inversely affects the range. A lower gravity (e.g. Moon) increases the range. Projection angle \\( \\theta \\) : The range is maximum at 45\u00b0, and symmetric about 45\u00b0 (e.g., 30\u00b0 and 60\u00b0 give same range). These effects can be visualized by altering parameters in the Python simulation.","title":"\ud83d\udcca Effect of Parameters on the Range Curve"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations-of-the-idealized-model","text":"Assumes no air resistance (drag), which is unrealistic in real-world applications. Assumes flat ground and constant gravity, ignoring curvature of Earth and altitude changes. Does not account for wind or spin of the projectile.","title":"\u26a0\ufe0f Limitations of the Idealized Model"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#suggestions-for-a-more-realistic-model","text":"Introduce air resistance using a drag force term: \\( F_d = -kv \\) or \\( F_d = -kv^2 \\) Add wind effects as a constant or time-varying horizontal force. Include launch height or uneven terrain modeling. Extend to 2D vector-based simulations using numerical integration (e.g., Runge-Kutta methods).","title":"\ud83e\udde0 Suggestions for a More Realistic Model"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Problem 2 \u2013 Investigating the Dynamics of a Forced Damped Pendulum Physics | Mechanics | KW1 Assignment Author: Bartu867 Date: March 27, 2025 \ud83c\udfaf Goal Analyze the motion of a forced damped pendulum and observe how different parameters influence its behavior \u2014 including regular, resonant, and chaotic motion. \ud83d\udcd8 Theoretical Background The motion of a forced damped pendulum is governed by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: - \\( \\theta \\) : angular displacement - \\( b \\) : damping coefficient - \\( \\omega_0 \\) : natural frequency - \\( A \\) : amplitude of external force - \\( \\omega \\) : driving frequency \ud83d\udcbb Python Simulation Below is a Python simulation of the pendulum using the Runge-Kutta 4th order method. ```python import numpy as np import matplotlib.pyplot as plt Parameters b = 0.5 # damping w0 = 1.5 # natural frequency A = 1.2 # driving force amplitude w = 0.666 # driving frequency dt = 0.04 # time step T = 100 # total time Time array t = np.arange(0, T, dt) Arrays for theta and omega theta = np.zeros_like(t) omega = np.zeros_like(t) Initial conditions theta[0] = 0.2 omega[0] = 0.0 Runge-Kutta 4th order method for i in range(1, len(t)): k1_theta = dt * omega[i - 1] k1_omega = dt * (-b * omega[i - 1] - w0**2 * np.sin(theta[i - 1]) + A * np.cos(w * t[i - 1])) k2_theta = dt * (omega[i - 1] + 0.5 * k1_omega) k2_omega = dt * (-b * (omega[i - 1] + 0.5 * k1_omega) - w0**2 * np.sin(theta[i - 1] + 0.5 * k1_theta) + A * np.cos(w * (t[i - 1] + 0.5 * dt))) k3_theta = dt * (omega[i - 1] + 0.5 * k2_omega) k3_omega = dt * (-b * (omega[i - 1] + 0.5 * k2_omega) - w0**2 * np.sin(theta[i - 1] + 0.5 * k2_theta) + A * np.cos(w * (t[i - 1] + 0.5 * dt))) k4_theta = dt * (omega[i - 1] + k3_omega) k4_omega = dt * (-b * (omega[i - 1] + k3_omega) - w0**2 * np.sin(theta[i - 1] + k3_theta) + A * np.cos(w * (t[i - 1] + dt))) theta[i] = theta[i - 1] + (k1_theta + 2 * k2_theta + 2 * k3_theta + k4_theta) / 6 omega[i] = omega[i - 1] + (k1_omega + 2 * k2_omega + 2 * k3_omega + k4_omega) / 6 Plotting plt.figure(figsize=(10, 5)) plt.plot(t, theta) plt.title(\"Forced Damped Pendulum \u2013 Angular Displacement Over Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show()","title":"Problem 2 \u2013 Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#problem-2-investigating-the-dynamics-of-a-forced-damped-pendulum","text":"Physics | Mechanics | KW1 Assignment Author: Bartu867 Date: March 27, 2025","title":"Problem 2 \u2013 Investigating the Dynamics of a Forced Damped Pendulum"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#goal","text":"Analyze the motion of a forced damped pendulum and observe how different parameters influence its behavior \u2014 including regular, resonant, and chaotic motion.","title":"\ud83c\udfaf Goal"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#theoretical-background","text":"The motion of a forced damped pendulum is governed by the second-order nonlinear differential equation: \\[ \\frac{d^2\\theta}{dt^2} + b\\frac{d\\theta}{dt} + \\omega_0^2 \\sin(\\theta) = A \\cos(\\omega t) \\] Where: - \\( \\theta \\) : angular displacement - \\( b \\) : damping coefficient - \\( \\omega_0 \\) : natural frequency - \\( A \\) : amplitude of external force - \\( \\omega \\) : driving frequency","title":"\ud83d\udcd8 Theoretical Background"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#python-simulation","text":"Below is a Python simulation of the pendulum using the Runge-Kutta 4th order method. ```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83d\udcbb Python Simulation"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#parameters","text":"b = 0.5 # damping w0 = 1.5 # natural frequency A = 1.2 # driving force amplitude w = 0.666 # driving frequency dt = 0.04 # time step T = 100 # total time","title":"Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#time-array","text":"t = np.arange(0, T, dt)","title":"Time array"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#arrays-for-theta-and-omega","text":"theta = np.zeros_like(t) omega = np.zeros_like(t)","title":"Arrays for theta and omega"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#initial-conditions","text":"theta[0] = 0.2 omega[0] = 0.0","title":"Initial conditions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#runge-kutta-4th-order-method","text":"for i in range(1, len(t)): k1_theta = dt * omega[i - 1] k1_omega = dt * (-b * omega[i - 1] - w0**2 * np.sin(theta[i - 1]) + A * np.cos(w * t[i - 1])) k2_theta = dt * (omega[i - 1] + 0.5 * k1_omega) k2_omega = dt * (-b * (omega[i - 1] + 0.5 * k1_omega) - w0**2 * np.sin(theta[i - 1] + 0.5 * k1_theta) + A * np.cos(w * (t[i - 1] + 0.5 * dt))) k3_theta = dt * (omega[i - 1] + 0.5 * k2_omega) k3_omega = dt * (-b * (omega[i - 1] + 0.5 * k2_omega) - w0**2 * np.sin(theta[i - 1] + 0.5 * k2_theta) + A * np.cos(w * (t[i - 1] + 0.5 * dt))) k4_theta = dt * (omega[i - 1] + k3_omega) k4_omega = dt * (-b * (omega[i - 1] + k3_omega) - w0**2 * np.sin(theta[i - 1] + k3_theta) + A * np.cos(w * (t[i - 1] + dt))) theta[i] = theta[i - 1] + (k1_theta + 2 * k2_theta + 2 * k3_theta + k4_theta) / 6 omega[i] = omega[i - 1] + (k1_omega + 2 * k2_omega + 2 * k3_omega + k4_omega) / 6","title":"Runge-Kutta 4th order method"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#plotting","text":"plt.figure(figsize=(10, 5)) plt.plot(t, theta) plt.title(\"Forced Damped Pendulum \u2013 Angular Displacement Over Time\") plt.xlabel(\"Time (s)\") plt.ylabel(\"Angle (rad)\") plt.grid(True) plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"\ud83c\udf0d Problem 1 \u2013 Orbital Period and Orbital Radius Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 29, 2025 \ud83c\udfaf Goal Understand and derive the relationship between the square of the orbital period and the cube of the orbital radius (Kepler\u2019s Third Law). Analyze this for circular orbits and simulate the behavior using Python for different orbital distances. \ud83d\udcd8 Theoretical Background Kepler's Third Law states that the square of the orbital period \\( T \\) is proportional to the cube of the orbital radius \\( r \\) for objects orbiting the same central mass: \\[ T^2 \\propto r^3 \\] For circular orbits, using Newton\u2019s law of gravitation and centripetal force, the orbital period can be derived as: \\[ T = 2\\pi \\sqrt{\\frac{r^3}{GM}} \\] Where: - \\( T \\) : orbital period (seconds) - \\( r \\) : orbital radius (meters) - \\( G \\) : gravitational constant \\( (6.674 \\times 10^{-11} \\, \\text{Nm}^2/\\text{kg}^2) \\) - \\( M \\) : mass of the central body (kg) \ud83e\uddea Python Simulation ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.674e-11 # gravitational constant (m^3/kg/s^2) M = 5.9722e24 # mass of the Earth (kg) Orbital radius values (from 7e6 to 4.2e7 meters) r = np.linspace(7e6, 4.2e7, 500) Orbital period calculation using Kepler's 3rd Law T = 2 * np.pi * np.sqrt(r**3 / (G * M)) # in seconds Plotting plt.figure(figsize=(10, 6)) plt.plot(r / 1e6, T / 3600, color=\"orange\") # Convert r to million meters, T to hours plt.title(\"Orbital Period vs Orbital Radius\") plt.xlabel(\"Orbital Radius (Million meters)\") plt.ylabel(\"Orbital Period (Hours)\") plt.grid(True) plt.tight_layout() plt.show()","title":"\ud83c\udf0d Problem 1 \u2013 Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1-orbital-period-and-orbital-radius","text":"Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 29, 2025","title":"\ud83c\udf0d Problem 1 \u2013 Orbital Period and Orbital Radius"},{"location":"1%20Physics/2%20Gravity/Problem_1/#goal","text":"Understand and derive the relationship between the square of the orbital period and the cube of the orbital radius (Kepler\u2019s Third Law). Analyze this for circular orbits and simulate the behavior using Python for different orbital distances.","title":"\ud83c\udfaf Goal"},{"location":"1%20Physics/2%20Gravity/Problem_1/#theoretical-background","text":"Kepler's Third Law states that the square of the orbital period \\( T \\) is proportional to the cube of the orbital radius \\( r \\) for objects orbiting the same central mass: \\[ T^2 \\propto r^3 \\] For circular orbits, using Newton\u2019s law of gravitation and centripetal force, the orbital period can be derived as: \\[ T = 2\\pi \\sqrt{\\frac{r^3}{GM}} \\] Where: - \\( T \\) : orbital period (seconds) - \\( r \\) : orbital radius (meters) - \\( G \\) : gravitational constant \\( (6.674 \\times 10^{-11} \\, \\text{Nm}^2/\\text{kg}^2) \\) - \\( M \\) : mass of the central body (kg)","title":"\ud83d\udcd8 Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_1/#python-simulation","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83e\uddea Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_1/#constants","text":"G = 6.674e-11 # gravitational constant (m^3/kg/s^2) M = 5.9722e24 # mass of the Earth (kg)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-radius-values-from-7e6-to-42e7-meters","text":"r = np.linspace(7e6, 4.2e7, 500)","title":"Orbital radius values (from 7e6 to 4.2e7 meters)"},{"location":"1%20Physics/2%20Gravity/Problem_1/#orbital-period-calculation-using-keplers-3rd-law","text":"T = 2 * np.pi * np.sqrt(r**3 / (G * M)) # in seconds","title":"Orbital period calculation using Kepler's 3rd Law"},{"location":"1%20Physics/2%20Gravity/Problem_1/#plotting","text":"plt.figure(figsize=(10, 6)) plt.plot(r / 1e6, T / 3600, color=\"orange\") # Convert r to million meters, T to hours plt.title(\"Orbital Period vs Orbital Radius\") plt.xlabel(\"Orbital Radius (Million meters)\") plt.ylabel(\"Orbital Period (Hours)\") plt.grid(True) plt.tight_layout() plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"\ud83d\udef0\ufe0f Problem 2 \u2013 Escape Velocity and Celestial Bodies Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 27, 2025 \ud83c\udfaf Goal Examine how escape velocity varies with the mass and radius of a celestial body. Understand the concept of escape velocity and simulate how different planetary parameters affect it using Python. \ud83d\udcd8 Theoretical Background The escape velocity \\( v_e \\) is the minimum speed required for an object to break free from the gravitational pull of a massive body, without any further propulsion. The formula is derived from energy conservation: [ v_e = \\sqrt{\\frac{2GM}{R}} ] Where: - \\( v_e \\) : escape velocity (m/s) - \\( G \\) : gravitational constant \\( 6.674 \\times 10^{-11} \\, \\text{Nm}^2/\\text{kg}^2 \\) - \\( M \\) : mass of the celestial body (kg) - \\( R \\) : radius of the celestial body (m) \ud83d\udcbb Python Simulation ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.674e-11 # Gravitational constant Example celestial body masses (kg) and radii (m) masses = np.array([5.972e24, 6.39e23, 1.898e27]) # Earth, Mars, Jupiter radii = np.array([6.371e6, 3.3895e6, 6.9911e7]) # Earth, Mars, Jupiter names = ['Earth', 'Mars', 'Jupiter'] Escape velocity calculation v_escape = np.sqrt(2 * G * masses / radii) Plotting plt.figure(figsize=(10,6)) plt.bar(names, v_escape, color='crimson') plt.title(\"Escape Velocity for Different Celestial Bodies\") plt.ylabel(\"Escape Velocity (m/s)\") plt.grid(axis='y') plt.tight_layout() plt.show()","title":"\ud83d\udef0\ufe0f Problem 2 \u2013 Escape Velocity and Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2-escape-velocity-and-celestial-bodies","text":"Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 27, 2025","title":"\ud83d\udef0\ufe0f Problem 2 \u2013 Escape Velocity and Celestial Bodies"},{"location":"1%20Physics/2%20Gravity/Problem_2/#goal","text":"Examine how escape velocity varies with the mass and radius of a celestial body. Understand the concept of escape velocity and simulate how different planetary parameters affect it using Python.","title":"\ud83c\udfaf Goal"},{"location":"1%20Physics/2%20Gravity/Problem_2/#theoretical-background","text":"The escape velocity \\( v_e \\) is the minimum speed required for an object to break free from the gravitational pull of a massive body, without any further propulsion. The formula is derived from energy conservation: [ v_e = \\sqrt{\\frac{2GM}{R}} ] Where: - \\( v_e \\) : escape velocity (m/s) - \\( G \\) : gravitational constant \\( 6.674 \\times 10^{-11} \\, \\text{Nm}^2/\\text{kg}^2 \\) - \\( M \\) : mass of the celestial body (kg) - \\( R \\) : radius of the celestial body (m)","title":"\ud83d\udcd8 Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_2/#python-simulation","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83d\udcbb Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#constants","text":"G = 6.674e-11 # Gravitational constant","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_2/#example-celestial-body-masses-kg-and-radii-m","text":"masses = np.array([5.972e24, 6.39e23, 1.898e27]) # Earth, Mars, Jupiter radii = np.array([6.371e6, 3.3895e6, 6.9911e7]) # Earth, Mars, Jupiter names = ['Earth', 'Mars', 'Jupiter']","title":"Example celestial body masses (kg) and radii (m)"},{"location":"1%20Physics/2%20Gravity/Problem_2/#escape-velocity-calculation","text":"v_escape = np.sqrt(2 * G * masses / radii)","title":"Escape velocity calculation"},{"location":"1%20Physics/2%20Gravity/Problem_2/#plotting","text":"plt.figure(figsize=(10,6)) plt.bar(names, v_escape, color='crimson') plt.title(\"Escape Velocity for Different Celestial Bodies\") plt.ylabel(\"Escape Velocity (m/s)\") plt.grid(axis='y') plt.tight_layout() plt.show()","title":"Plotting"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"\ud83d\udef0\ufe0f Problem 3 \u2013 Trajectories of a Freely Released Payload Near Earth Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 29, 2025 \ud83c\udfaf Goal Simulate and analyze the possible trajectories of a payload released near Earth from a moving spacecraft. Determine whether the object enters orbit, falls to Earth, or escapes into space depending on initial conditions. \ud83d\udcd8 Theoretical Background When an object is released from a spacecraft near Earth, it will follow a trajectory determined by its initial velocity and position relative to Earth's gravity. Using Newton's law of universal gravitation: \\[ F = \\frac{GMm}{r^2} \\] The motion of the payload follows Newton's second law: \\[ F = ma \\Rightarrow a = \\frac{GM}{r^2} \\] Depending on the initial velocity vector: - If \\( v < v_{orbit} \\) , it falls back to Earth - If \\( v = v_{orbit} \\) , it enters circular orbit - If \\( v > v_{escape} \\) , it escapes Earth's gravity We will simulate the trajectory by numerically integrating the motion under gravitational acceleration. \ud83d\udcbb Python Simulation ```python import numpy as np import matplotlib.pyplot as plt Constants G = 6.674e-11 # gravitational constant (m^3/kg/s^2) M = 5.972e24 # mass of Earth (kg) R = 6.371e6 # radius of Earth (m) Initial conditions r0 = np.array([7.0e6, 0]) # initial position (just above Earth surface) v0 = np.array([0, 8000]) # initial velocity in m/s (tangential) Simulation parameters dt = 1 # time step (seconds) steps = 10000 # number of steps Arrays to store trajectory positions = np.zeros((steps, 2)) velocities = np.zeros((steps, 2)) Set initial values positions[0] = r0 velocities[0] = v0 for i in range(1, steps): r = positions[i-1] v = velocities[i-1] dist = np.linalg.norm(r) if dist < R: positions = positions[:i] break # Gravitational acceleration a = -G * M * r / dist**3 # Update velocity and position (Euler method) velocities[i] = v + a * dt positions[i] = r + velocities[i] * dt Plotting x = positions[:, 0] / 1000 # convert to km y = positions[:, 1] / 1000 plt.figure(figsize=(8,8)) plt.plot(x, y, label='Payload trajectory') circle = plt.Circle((0, 0), R/1000, color='blue', alpha=0.5, label='Earth') plt.gca().add_patch(circle) plt.xlabel(\"x position (km)\") plt.ylabel(\"y position (km)\") plt.title(\"Trajectory of Payload Released Near Earth\") plt.axis(\"equal\") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"\ud83d\udef0\ufe0f Problem 3 \u2013 Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3-trajectories-of-a-freely-released-payload-near-earth","text":"Physics | Gravity | KW1 Assignment Author: Bartu867 Date: March 29, 2025","title":"\ud83d\udef0\ufe0f Problem 3 \u2013 Trajectories of a Freely Released Payload Near Earth"},{"location":"1%20Physics/2%20Gravity/Problem_3/#goal","text":"Simulate and analyze the possible trajectories of a payload released near Earth from a moving spacecraft. Determine whether the object enters orbit, falls to Earth, or escapes into space depending on initial conditions.","title":"\ud83c\udfaf Goal"},{"location":"1%20Physics/2%20Gravity/Problem_3/#theoretical-background","text":"When an object is released from a spacecraft near Earth, it will follow a trajectory determined by its initial velocity and position relative to Earth's gravity. Using Newton's law of universal gravitation: \\[ F = \\frac{GMm}{r^2} \\] The motion of the payload follows Newton's second law: \\[ F = ma \\Rightarrow a = \\frac{GM}{r^2} \\] Depending on the initial velocity vector: - If \\( v < v_{orbit} \\) , it falls back to Earth - If \\( v = v_{orbit} \\) , it enters circular orbit - If \\( v > v_{escape} \\) , it escapes Earth's gravity We will simulate the trajectory by numerically integrating the motion under gravitational acceleration.","title":"\ud83d\udcd8 Theoretical Background"},{"location":"1%20Physics/2%20Gravity/Problem_3/#python-simulation","text":"```python import numpy as np import matplotlib.pyplot as plt","title":"\ud83d\udcbb Python Simulation"},{"location":"1%20Physics/2%20Gravity/Problem_3/#constants","text":"G = 6.674e-11 # gravitational constant (m^3/kg/s^2) M = 5.972e24 # mass of Earth (kg) R = 6.371e6 # radius of Earth (m)","title":"Constants"},{"location":"1%20Physics/2%20Gravity/Problem_3/#initial-conditions","text":"r0 = np.array([7.0e6, 0]) # initial position (just above Earth surface) v0 = np.array([0, 8000]) # initial velocity in m/s (tangential)","title":"Initial conditions"},{"location":"1%20Physics/2%20Gravity/Problem_3/#simulation-parameters","text":"dt = 1 # time step (seconds) steps = 10000 # number of steps","title":"Simulation parameters"},{"location":"1%20Physics/2%20Gravity/Problem_3/#arrays-to-store-trajectory","text":"positions = np.zeros((steps, 2)) velocities = np.zeros((steps, 2))","title":"Arrays to store trajectory"},{"location":"1%20Physics/2%20Gravity/Problem_3/#set-initial-values","text":"positions[0] = r0 velocities[0] = v0 for i in range(1, steps): r = positions[i-1] v = velocities[i-1] dist = np.linalg.norm(r) if dist < R: positions = positions[:i] break # Gravitational acceleration a = -G * M * r / dist**3 # Update velocity and position (Euler method) velocities[i] = v + a * dt positions[i] = r + velocities[i] * dt","title":"Set initial values"},{"location":"1%20Physics/2%20Gravity/Problem_3/#plotting","text":"x = positions[:, 0] / 1000 # convert to km y = positions[:, 1] / 1000 plt.figure(figsize=(8,8)) plt.plot(x, y, label='Payload trajectory') circle = plt.Circle((0, 0), R/1000, color='blue', alpha=0.5, label='Earth') plt.gca().add_patch(circle) plt.xlabel(\"x position (km)\") plt.ylabel(\"y position (km)\") plt.title(\"Trajectory of Payload Released Near Earth\") plt.axis(\"equal\") plt.grid(True) plt.legend() plt.tight_layout() plt.show()","title":"Plotting"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}